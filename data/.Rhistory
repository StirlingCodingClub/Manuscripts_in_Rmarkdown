colnames(rXs) <- c("Intercept", "Weight", "Volant", "Protected", "HFI");
P_Weight      <- 1 - (sum(abs(mod_ts[2]) > abs(rXs[, 2])) / (iters + 1));
P_Volant      <- 1 - (sum(abs(mod_ts[3]) > abs(rXs[, 3])) / (iters + 1));
P_Protected   <- 1 - (sum(abs(mod_ts[4]) > abs(rXs[, 4])) / (iters + 1));
par(mfrow = c(2, 2));
hist(x = rXs[,2], xlab = "Randomised Weight coefficient", main = "");
arrows(x0 = mod_ts[2], y0 = 2500, y1 = 0, lwd = 3);
hist(x = rXs[,3], xlab = "Randomised Volant coefficient", main = "");
arrows(x0 = mod_ts[3], y0 = 2500, y1 = 0, lwd = 3);
hist(x = rXs[,4], xlab = "Randomised Protected coefficient", main = "");
arrows(x0 = mod_ts[4], y0 = 2500, y1 = 0, lwd = 3);
P_Weight
P_Volant
P_Protected
mod      <- lm(mean_dispersal ~ Weight + Volant + Protected,
data = scale_mean);
summod   <- summary(mod);
mod_ts   <- as.numeric(summod$coefficients[,3]);
Weight_R <- as.numeric(scale_mean$Weight);
Volant_R <- as.numeric(scale_mean$Volant);
Protec_R <- as.numeric(scale_mean$Protected);
N        <- dim(scale_mean)[1];
iters    <- 99999;
rXs      <- matrix(data = NA, nrow = iters, ncol = 4);
for(i in 1:iters){
YY       <- sample(scale_mean$mean_dispersal, size = N, replace = FALSE);
rand_mod <- lm(YY ~ Weight_R + Volant_R + Protec_R + HFI_R);
rand_sum <- summary(rand_mod);
rand_ts  <- as.numeric(rand_sum$coefficients[,3]);
rXs[i, ] <- rand_ts;
if(i %% 10000 == 0){
print(i);
}
}
colnames(rXs) <- c("Intercept", "Weight", "Volant", "Protected", "HFI");
P_Weight      <- 1 - (sum(abs(mod_ts[2]) > abs(rXs[, 2])) / (iters + 1));
P_Volant      <- 1 - (sum(abs(mod_ts[3]) > abs(rXs[, 3])) / (iters + 1));
P_Protected   <- 1 - (sum(abs(mod_ts[4]) > abs(rXs[, 4])) / (iters + 1));
par(mfrow = c(2, 2));
hist(x = rXs[,2], xlab = "Randomised Weight coefficient", main = "");
arrows(x0 = mod_ts[2], y0 = 2500, y1 = 0, lwd = 3);
hist(x = rXs[,3], xlab = "Randomised Volant coefficient", main = "");
arrows(x0 = mod_ts[3], y0 = 2500, y1 = 0, lwd = 3);
hist(x = rXs[,4], xlab = "Randomised Protected coefficient", main = "");
arrows(x0 = mod_ts[4], y0 = 2500, y1 = 0, lwd = 3);
mod      <- lm(mean_dispersal ~ Weight + Volant + Protected,
data = scale_mean);
summod   <- summary(mod);
mod_ts   <- as.numeric(summod$coefficients[,3]);
mod      <- lm(mean_dispersal ~ Weight + Volant + Protected,
data = scale_mean);
summod   <- summary(mod);
mod_ts   <- as.numeric(summod$coefficients[,3]);
Weight_R <- as.numeric(scale_mean$Weight);
Volant_R <- as.numeric(scale_mean$Volant);
Protec_R <- as.numeric(scale_mean$Protected);
N        <- dim(scale_mean)[1];
iters    <- 99999;
rXs      <- matrix(data = NA, nrow = iters, ncol = 4);
for(i in 1:iters){
YY       <- sample(scale_mean$mean_dispersal, size = N, replace = FALSE);
rand_mod <- lm(YY ~ Weight_R + Volant_R + Protec_R);
rand_sum <- summary(rand_mod);
rand_ts  <- as.numeric(rand_sum$coefficients[,3]);
rXs[i, ] <- rand_ts;
if(i %% 10000 == 0){
print(i);
}
}
colnames(rXs) <- c("Intercept", "Weight", "Volant", "Protected", "HFI");
P_Weight      <- 1 - (sum(abs(mod_ts[2]) > abs(rXs[, 2])) / (iters + 1));
P_Volant      <- 1 - (sum(abs(mod_ts[3]) > abs(rXs[, 3])) / (iters + 1));
P_Protected   <- 1 - (sum(abs(mod_ts[4]) > abs(rXs[, 4])) / (iters + 1));
par(mfrow = c(2, 2));
hist(x = rXs[,2], xlab = "Randomised Weight coefficient", main = "");
arrows(x0 = mod_ts[2], y0 = 2500, y1 = 0, lwd = 3);
hist(x = rXs[,3], xlab = "Randomised Volant coefficient", main = "");
arrows(x0 = mod_ts[3], y0 = 2500, y1 = 0, lwd = 3);
hist(x = rXs[,4], xlab = "Randomised Protected coefficient", main = "");
arrows(x0 = mod_ts[4], y0 = 2500, y1 = 0, lwd = 3);
P_Volant
### Install packages
###
library(ggpubr)
library(dplyr)
library(stats)
library(plotrix)
library(ggplot2)
library(MuMIn)
library(GGally)
library(ggcorrplot)
library(DHARMa)
df_new_max <- read.csv("Max_seed_dispersal_edit.csv")
df_new_max$Protected <- as.factor(df_new_max$Protected)
df_new_max$Volant <- as.factor(df_new_max$Volant)
### Scale and center Weight & HFI
scale_max <- df_new_max %>% mutate_each_(list(~scale(.)%>% as.vector),
vars = c("Weight", "HFI"))
### Linear model, normal distribution
lin.glm1 <- glm(max_dispersal ~ Weight + Volant + Protected + HFI,
data = scale_max,
family = gaussian(link='identity'))
### Linear model, lognormal distribution
### The "GLM" equivalent of logtransforming data
log.glm1 <- glm(max_dispersal ~ Weight + Volant + Protected + HFI,
data = scale_max,
family = gaussian(link='log'))
### Linear model, gamma distribution
gam.glm1 <- glm(max_dispersal ~ Weight + Volant + Protected + HFI,
data = scale_max, maxit = 100,
family = Gamma(link = 'log'),
na.action = "na.fail")
### Linear model, quasipoisson distribution
quasipois.glm1 <- glm(max_dispersal ~ Weight + Volant + Protected + HFI,
data = scale_max,
family = quasipoisson(link = "log"),
na.action = "na.fail")
### Linear model, poisson distribution
### No the warnings when fitting
pois.glm1 <- glm(max_dispersal ~ Weight + Volant + Protected + HFI,
data = scale_max,
family = poisson(link = "log"))
### Likelihood-ratio test for all models
anova(lin.glm1,log.glm1,gam.glm1,pois.glm1, quasipois.glm1)
### AIC test - can't do AIC for quasi models
AIC(lin.glm1,log.glm1, gam.glm1, pois.glm1)
gamma_max <-  glm(max_dispersal ~ Weight + Volant + Protected + HFI,
data = scale_max, maxit = 100,
family = Gamma(link = 'log'),
na.action = "na.fail")
summary(gamma_max)
max_res <- simulateResiduals(gamma_max, plot=T, n=250)
### Use Dredge function to identify all models and best AIC score
all_max_models <- dredge(gamma_max)
plot(all_max_models)
all_max_models
model.avg(all_max_models, subset = delta < 4)
confset.95p1 <- get.models(all_max_models, cumsum(weight) <= .95)
avgmod.95p1 <- model.avg(confset.95p1)
summary(avgmod.95p1)
confint(avgmod.95p1)
### Best model for max dispersal drops Protected + HFI
gamma_max <- glm(max_dispersal ~ Weight + Volant + Protected,
data = scale_max,
family = Gamma(link='log'))
gamma_max2 <- glm(max_dispersal ~ Weight + Volant,
data = scale_max,
family = Gamma(link='log'))
summary(gamma_max)
summary(gamma_max2)
###########################################################################
df_new_mean <- read.csv("Mean_seed_dispersal_edit.csv")
df_new_mean$Protected <- as.factor(df_new_mean$Protected)
df_new_mean$Volant <- as.factor(df_new_mean$Volant)
### Scale and centre Weight & HFI
scale_mean <- df_new_mean %>% mutate_each_(list(~scale(.)%>% as.vector),
vars = c("Weight", "HFI"))
### Linear model, normal distribution
lin.glm <- glm(mean_dispersal ~ Weight + Volant + Protected + HFI,
data = scale_mean,
family = gaussian(link='identity'))
### Linear model, lognormal distribution
### The "GLM" equivalent of logtransforming data
log.glm <- glm(mean_dispersal ~ Weight + Volant + Protected + HFI,
data = scale_mean,
family = gaussian(link='log'))
### Linear model, gamma distribution
gam.glm <- glm(mean_dispersal ~ Weight + Volant + Protected + HFI,
data = scale_mean, maxit = 100,
family = Gamma(link = 'log'),
na.action = "na.fail")
### Linear model, quasipoisson distribution
quasipois.glm <- glm(mean_dispersal ~ Weight + Volant + Protected + HFI,
data = scale_mean,
family = quasipoisson(link = "log"),
na.action = "na.fail")
### Linear model, poisson distribution
### No the warnings when fitting
pois.glm <- glm(mean_dispersal ~ Weight + Volant + Protected + HFI,
data = scale_mean,
family = poisson(link = "log"))
### Likelihood-ratio test for all models
anova(lin.glm,log.glm,gam.glm,pois.glm, quasipois.glm)
### AIC test - can't do AIC for quasi models
AIC(lin.glm,log.glm, gam.glm, pois.glm)
gamma_mean <-  glm(mean_dispersal ~ Weight + Volant + Protected + HFI,
data = scale_mean, maxit = 100,
family = Gamma(link = 'log'),
na.action = "na.fail")
summary(gamma_mean)
mean_res <- simulateResiduals(gamma_mean, plot=T, n=250)
### Use Dredge function to identify all models and best AIC score
all_mean_models <- dredge(gamma_mean)
plot(all_mean_models)
all_mean_models
model.avg(all_mean_models, subset = delta < 4)
confset.95p1 <- get.models(all_mean_models, cumsum(weight) <= .95)
avgmod.95p1 <- model.avg(confset.95p1)
summary(avgmod.95p1)
confint(avgmod.95p1)
### Best model for mean dispersal drops HFI
gamma_mean <- glm(mean_dispersal ~ Weight + Volant + Protected,
data = scale_mean,
family = Gamma(link='log'))
summary(gamma_mean)
##################################
summary(gamma_mean)
summary(gamma_max)
### RANDOMISATION TEST - MEAN
mod      <- lm(mean_dispersal ~ Weight + Volant + Protected + HFI,
data = scale_mean);
summod   <- summary(mod);
mod_ts   <- as.numeric(summod$coefficients[,3]);
Weight_R <- as.numeric(scale_mean$Weight);
Volant_R <- as.numeric(scale_mean$Volant);
Protec_R <- as.numeric(scale_mean$Protected);
HFI_R    <- as.numeric(scale_mean$HFI);
N        <- dim(scale_mean)[1];
iters    <- 99999;
rXs      <- matrix(data = NA, nrow = iters, ncol = 5);
for(i in 1:iters){
YY       <- sample(scale_mean$mean_dispersal, size = N, replace = FALSE);
rand_mod <- lm(YY ~ Weight_R + Volant_R + Protec_R + HFI_R);
rand_sum <- summary(rand_mod);
rand_ts  <- as.numeric(rand_sum$coefficients[,3]);
rXs[i, ] <- rand_ts;
if(i %% 10000 == 0){
print(i);
}
}
colnames(rXs) <- c("Intercept", "Weight", "Volant", "Protected", "HFI");
P_Weight      <- 1 - (sum(abs(mod_ts[2]) > abs(rXs[, 2])) / (iters + 1));
P_Volant      <- 1 - (sum(abs(mod_ts[3]) > abs(rXs[, 3])) / (iters + 1));
P_Protected   <- 1 - (sum(abs(mod_ts[4]) > abs(rXs[, 4])) / (iters + 1));
P_HFI         <- 1 - (sum(abs(mod_ts[5]) > abs(rXs[, 5])) / (iters + 1));
par(mfrow = c(2, 2));
hist(x = rXs[,2], xlab = "Randomised Weight coefficient", main = "");
arrows(x0 = mod_ts[2], y0 = 2500, y1 = 0, lwd = 3);
hist(x = rXs[,3], xlab = "Randomised Volant coefficient", main = "");
arrows(x0 = mod_ts[3], y0 = 2500, y1 = 0, lwd = 3);
hist(x = rXs[,4], xlab = "Randomised Protected coefficient", main = "");
arrows(x0 = mod_ts[4], y0 = 2500, y1 = 0, lwd = 3);
hist(x = rXs[,5], xlab = "Randomised HFI coefficient", main = "");
arrows(x0 = mod_ts[5], y0 = 2500, y1 = 0, lwd = 3);
P_Weight
gamma_mean <-  glm(mean_dispersal ~ Weight + Volant + Protected + HFI,
data = scale_mean, maxit = 100,
family = Gamma(link = 'log'),
na.action = "na.fail")
summary(gamma_mean)
### RANDOMISATION TEST - MEAN
mod      <- lm(mean_dispersal ~ Weight + Volant + Protected,
data = scale_mean);
summod   <- summary(mod);
mod_ts   <- as.numeric(summod$coefficients[,3]);
Weight_R <- as.numeric(scale_mean$Weight);
Volant_R <- as.numeric(scale_mean$Volant);
Protec_R <- as.numeric(scale_mean$Protected);
N        <- dim(scale_mean)[1];
iters    <- 99999;
rXs      <- matrix(data = NA, nrow = iters, ncol = 5);
for(i in 1:iters){
YY       <- sample(scale_mean$mean_dispersal, size = N, replace = FALSE);
rand_mod <- lm(YY ~ Weight_R + Volant_R + Protec_R);
rand_sum <- summary(rand_mod);
rand_ts  <- as.numeric(rand_sum$coefficients[,3]);
rXs[i, ] <- rand_ts;
if(i %% 10000 == 0){
print(i);
}
}
colnames(rXs) <- c("Intercept", "Weight", "Volant", "Protected", "HFI");
P_Weight      <- 1 - (sum(abs(mod_ts[2]) > abs(rXs[, 2])) / (iters + 1));
P_Volant      <- 1 - (sum(abs(mod_ts[3]) > abs(rXs[, 3])) / (iters + 1));
P_Protected   <- 1 - (sum(abs(mod_ts[4]) > abs(rXs[, 4])) / (iters + 1));
par(mfrow = c(2, 2));
hist(x = rXs[,2], xlab = "Randomised Weight coefficient", main = "");
arrows(x0 = mod_ts[2], y0 = 2500, y1 = 0, lwd = 3);
hist(x = rXs[,3], xlab = "Randomised Volant coefficient", main = "");
arrows(x0 = mod_ts[3], y0 = 2500, y1 = 0, lwd = 3);
hist(x = rXs[,4], xlab = "Randomised Protected coefficient", main = "");
arrows(x0 = mod_ts[4], y0 = 2500, y1 = 0, lwd = 3);
### RANDOMISATION TEST - MEAN
mod      <- lm(mean_dispersal ~ Weight + Volant + Protected,
data = scale_mean);
summod   <- summary(mod);
mod_ts   <- as.numeric(summod$coefficients[,3]);
Weight_R <- as.numeric(scale_mean$Weight);
Volant_R <- as.numeric(scale_mean$Volant);
Protec_R <- as.numeric(scale_mean$Protected);
N        <- dim(scale_mean)[1];
iters    <- 99999;
rXs      <- matrix(data = NA, nrow = iters, ncol = 4);
for(i in 1:iters){
YY       <- sample(scale_mean$mean_dispersal, size = N, replace = FALSE);
rand_mod <- lm(YY ~ Weight_R + Volant_R + Protec_R);
rand_sum <- summary(rand_mod);
rand_ts  <- as.numeric(rand_sum$coefficients[,3]);
rXs[i, ] <- rand_ts;
if(i %% 10000 == 0){
print(i);
}
}
colnames(rXs) <- c("Intercept", "Weight", "Volant", "Protected", "HFI");
P_Weight      <- 1 - (sum(abs(mod_ts[2]) > abs(rXs[, 2])) / (iters + 1));
P_Volant      <- 1 - (sum(abs(mod_ts[3]) > abs(rXs[, 3])) / (iters + 1));
P_Protected   <- 1 - (sum(abs(mod_ts[4]) > abs(rXs[, 4])) / (iters + 1));
par(mfrow = c(2, 2));
hist(x = rXs[,2], xlab = "Randomised Weight coefficient", main = "");
arrows(x0 = mod_ts[2], y0 = 2500, y1 = 0, lwd = 3);
hist(x = rXs[,3], xlab = "Randomised Volant coefficient", main = "");
arrows(x0 = mod_ts[3], y0 = 2500, y1 = 0, lwd = 3);
hist(x = rXs[,4], xlab = "Randomised Protected coefficient", main = "");
arrows(x0 = mod_ts[4], y0 = 2500, y1 = 0, lwd = 3);
gamma_mean <- glm(mean_dispersal ~ Weight + Volant + Protected,
data = scale_mean,
family = Gamma(link='log'))
summary(gamma_mean)
P_Weight
P_Volant
P_Protected
gamma_mean <- glm(mean_dispersal ~ Weight + as.numeric(Volant) + Protected,
data = scale_mean,
family = Gamma(link='log'))
summary(gamma_mean)
P_Protected
P_Volant
### RANDOMISATION TEST - MEAN
mod      <- lm(mean_dispersal ~ Weight + Volant + Protected,
data = scale_mean);
summod   <- summary(mod);
mod_ts   <- as.numeric(summod$coefficients[,3]);
Weight_R <- as.numeric(scale_mean$Weight);
Volant_R <- as.numeric(scale_mean$Volant);
Protec_R <- as.numeric(scale_mean$Protected);
N        <- dim(scale_mean)[1];
iters    <- 99999;
rXs      <- matrix(data = NA, nrow = iters, ncol = 4);
for(i in 1:iters){
YY       <- sample(scale_mean$mean_dispersal, size = N, replace = FALSE);
rand_mod <- lm(YY ~ Volant_R + Weight_R + Protec_R);
rand_sum <- summary(rand_mod);
rand_ts  <- as.numeric(rand_sum$coefficients[,3]);
rXs[i, ] <- rand_ts;
if(i %% 10000 == 0){
print(i);
}
}
colnames(rXs) <- c("Intercept", "Weight", "Volant", "Protected", "HFI");
P_Weight      <- 1 - (sum(abs(mod_ts[2]) > abs(rXs[, 2])) / (iters + 1));
P_Volant      <- 1 - (sum(abs(mod_ts[3]) > abs(rXs[, 3])) / (iters + 1));
P_Protected   <- 1 - (sum(abs(mod_ts[4]) > abs(rXs[, 4])) / (iters + 1));
par(mfrow = c(2, 2));
hist(x = rXs[,2], xlab = "Randomised Weight coefficient", main = "");
arrows(x0 = mod_ts[2], y0 = 2500, y1 = 0, lwd = 3);
hist(x = rXs[,3], xlab = "Randomised Volant coefficient", main = "");
arrows(x0 = mod_ts[3], y0 = 2500, y1 = 0, lwd = 3);
hist(x = rXs[,4], xlab = "Randomised Protected coefficient", main = "");
arrows(x0 = mod_ts[4], y0 = 2500, y1 = 0, lwd = 3);
P_Volant
P_Weight
gamma_max <- glm(max_dispersal ~ Weight + Volant + Protected,
data = scale_max,
family = Gamma(link='log'))
gamma_max2 <- glm(max_dispersal ~ Weight + Volant,
data = scale_max,
family = Gamma(link='log'))
summary(gamma_max)
summary(gamma_max2)
mod      <- lm(max_dispersal ~ Weight + Volant, data = scale_max);
summod   <- summary(mod);
mod_ts   <- as.numeric(summod$coefficients[,3]);
Weight_R <- as.numeric(scale_max$Weight);
Volant_R <- as.numeric(scale_max$Volant);
N        <- dim(scale_max)[1];
iters    <- 99999;
rXs      <- matrix(data = NA, nrow = iters, ncol = 3);
for(i in 1:iters){
YY       <- sample(scale_max$max_dispersal, size = N, replace = FALSE);
rand_mod <- lm(YY ~ Weight_R + Volant_R);
rand_sum <- summary(rand_mod);
rand_ts  <- as.numeric(rand_sum$coefficients[,3]);
rXs[i, ] <- rand_ts;
if(i %% 10000 == 0){
print(i);
}
}
colnames(rXs) <- c("Intercept", "Weight", "Volant", "Protected", "HFI");
P_Weight      <- 1 - (sum(abs(mod_ts[2]) > abs(rXs[, 2])) / (iters + 1));
P_Volant      <- 1 - (sum(abs(mod_ts[3]) > abs(rXs[, 3])) / (iters + 1));
par(mfrow = c(1, 2));
hist(x = rXs[,2], xlab = "Randomised Weight coefficient", main = "");
arrows(x0 = mod_ts[2], y0 = 2500, y1 = 0, lwd = 3);
hist(x = rXs[,3], xlab = "Randomised Volant coefficient", main = "");
arrows(x0 = mod_ts[3], y0 = 2500, y1 = 0, lwd = 3);
P_Weight
P_Volant
summary(gamma_max2)
gamma_mean <- glm(mean_dispersal ~ Volant,
data = scale_mean,
family = Gamma(link='log'))
summary(gamma_mean)
gamma_mean <- glm(mean_dispersal ~ Weight + Volant,
data = scale_mean,
family = Gamma(link='log'))
summary(gamma_mean)
gamma_mean <- glm(mean_dispersal ~ Weight + Volant + Protected,
data = scale_mean,
family = Gamma(link='log'))
summary(gamma_mean)
gamma_mean <- glm(mean_dispersal ~ Weight * Volant * Protected,
data = scale_mean,
family = Gamma(link='log'))
summary(gamma_mean)
gamma_mean <- glm(mean_dispersal ~ Weight + Volant + Protected + Volant:Protected,
data = scale_mean,
family = Gamma(link='log'))
summary(gamma_mean)
gamma_mean <- glm(mean_dispersal ~ Weight + Volant + Protected + Volant:Weight,
data = scale_mean,
family = Gamma(link='log'))
summary(gamma_mean)
### RANDOMISATION TEST - MEAN
mod      <- lm(mean_dispersal ~ Weight + Volant + Protected + Volant:Weight,
data = scale_mean);
summod   <- summary(mod);
mod_ts   <- as.numeric(summod$coefficients[,3]);
Weight_R <- as.numeric(scale_mean$Weight);
Volant_R <- as.numeric(scale_mean$Volant);
Protec_R <- as.numeric(scale_mean$Protected);
N        <- dim(scale_mean)[1];
iters    <- 99999;
rXs      <- matrix(data = NA, nrow = iters, ncol = 5);
for(i in 1:iters){
YY       <- sample(scale_mean$mean_dispersal, size = N, replace = FALSE);
rand_mod <- lm(YY ~ Weight_R + Volant_R + Protec_R + Volant_R:Weight_R);
rand_sum <- summary(rand_mod);
rand_ts  <- as.numeric(rand_sum$coefficients[,3]);
rXs[i, ] <- rand_ts;
if(i %% 10000 == 0){
print(i);
}
}
colnames(rXs) <- c("Intercept", "Weight", "Volant", "Protected", "HFI");
P_Weight      <- 1 - (sum(abs(mod_ts[2]) > abs(rXs[, 2])) / (iters + 1));
P_Volant      <- 1 - (sum(abs(mod_ts[3]) > abs(rXs[, 3])) / (iters + 1));
P_Protected   <- 1 - (sum(abs(mod_ts[4]) > abs(rXs[, 4])) / (iters + 1));
P_Interact    <- 1 - (sum(abs(mod_ts[5]) > abs(rXs[, 5])) / (iters + 1));
P_Interact
P_Volant
gamma_mean <- glm(mean_dispersal ~ Volant + Weight + Protected,
data = scale_mean,
family = Gamma(link='log'))
summary(gamma_mean)
gamma_mean <- glm(mean_dispersal ~ Weight + Volant + Protected,
data = scale_mean,
family = Gamma(link='log'))
summary(gamma_mean)
brad <- c(77, 71, 79, 33, 46, 57, 64, 53, 61, 71, 61, 44, 52, 67, 81, 50, 67,
61, 55, 55, 64, 41, 61, 50, 57, 72, 67, 60, 50, 42, 74, 32, 56, 70,
57, 74, 79, 67, 52, 80);
dan  <- c(55, 82, 73, 64, 43, 62, 50, 63, 57, 68, 53, 61, 14, 64, 61, 57, 60,
59, 70, 54, 65, 52, 60, 46, 65, 64, 48, 78, 44, 10, 44, 74, 40, 62,
72, 70, 64, 59, 55);
t.test(brad, dan)
dan2 <- dan[dan > 20]
t.test(brad, dan2)
sd(brad)
sd(dan)
dat <- cbind(c(brad, dan), rep("brad", length(brad)), rep("dan", length(dan)));
dat <- cbind(c(brad, dan),
c(rep("brad", length(brad)), rep("dan", length(dan))));
dat
dat[,1] <- as.numeric(dat[,1]);
dat
grader  <- cbind(c(rep("brad", length(brad)), rep("dan", length(dan))));
grades  <- c(brad, dan);
dat <- data.frame(grades, grader);
dat
leveneTest(grades~grade, dat);
brad <- c(77, 71, 79, 33, 46, 57, 64, 53, 61, 71, 61, 44, 52, 67, 81, 50, 67,
61, 55, 55, 64, 41, 61, 50, 57, 72, 67, 60, 50, 42, 74, 32, 56, 70,
57, 74, 79, 67, 52, 80);
dan  <- c(55, 82, 73, 64, 43, 62, 50, 63, 57, 68, 53, 61, 14, 64, 61, 57, 60,
59, 70, 54, 65, 52, 60, 46, 65, 64, 48, 78, 44, 10, 44, 74, 40, 62,
72, 70, 64, 59, 55);
grader  <- cbind(c(rep("brad", length(brad)), rep("dan", length(dan))));
grades  <- c(brad, dan);
dat <- data.frame(grades, grader);
library("car")
leveneTest(grades~grade, dat);
leveneTest(grades~grades, dat);
brad <- c(77, 71, 79, 33, 46, 57, 64, 53, 61, 71, 61, 44, 52, 67, 81, 50, 67,
61, 55, 55, 64, 41, 61, 50, 57, 72, 67, 60, 50, 42, 74, 32, 56, 70,
57, 74, 79, 67, 52, 80);
dan  <- c(55, 82, 73, 64, 43, 62, 50, 63, 57, 68, 53, 61, 14, 64, 61, 57, 60,
59, 70, 54, 65, 52, 60, 46, 65, 64, 48, 78, 44, 10, 44, 74, 40, 62,
72, 70, 64, 59, 55);
grader  <- cbind(c(rep("brad", length(brad)), rep("dan", length(dan))));
grades  <- c(brad, dan);
dat <- data.frame(grades, grader);
library("car")
leveneTest(grades~grader, dat);
t.test(brad, dan2)
c(3, 5, 7, 8, 11, 16, 20, 23, 25, 30, 35, 40, 45, 48, 51, 56, 60)
length(c(3, 5, 7, 8, 11, 16, 20, 23, 25, 30, 35, 40, 45, 48, 51, 56, 60))
setwd("~/Dropbox/projects/StirlingCodingClub/Manuscripts_in_Rmarkdown/data")
dat <- read.csv("Bumpus_data.csv");
head(dat)
mod <- lm(totlen ~ wgt + sex + head, data = dat)
summary(mod)
anova(mod)
